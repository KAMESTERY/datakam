diff --git a/project.clj b/project.clj
index 02691eb..9fbb573 100644
--- a/project.clj
+++ b/project.clj
@@ -12,15 +12,15 @@
                  [io.pedestal/pedestal.immutant "0.5.7"]
                  ;; [io.pedestal/pedestal.tomcat "0.5.7"]
                  [io.pedestal/pedestal.aws "0.5.7"]
-                 [com.cognitect.aws/api "0.8.383"]
-                 [com.cognitect.aws/endpoints "1.1.11.655"]
-                 [com.cognitect.aws/dynamodb "746.2.533.0"] ;; https://mvnrepository.com/artifact/com.cognitect.aws/dynamodb
+                 [com.cognitect.aws/api "0.8.391"]
+                 [com.cognitect.aws/endpoints "1.1.11.670"]
+                 [com.cognitect.aws/dynamodb "770.2.568.0"] ;; https://mvnrepository.com/artifact/com.cognitect.aws/dynamodb
                  [ch.qos.logback/logback-classic "1.3.0-alpha5" :exclusions [org.slf4j/slf4j-api]]
                  [org.slf4j/jul-to-slf4j "2.0.0-alpha1"]
                  [org.slf4j/jcl-over-slf4j "2.0.0-alpha1"]
                  [org.slf4j/log4j-over-slf4j "2.0.0-alpha1"]
                  [environ "1.1.0"]
-                 [com.walmartlabs/lacinia "0.36.0-alpha-1"]
+                 [com.walmartlabs/lacinia "0.36.0-alpha-2"]
                  [selmer "1.12.17"]
                  [com.rpl/specter "1.1.3"]
                  ;;[buddy "2.0.0"]
@@ -28,6 +28,7 @@
                  [buddy/buddy-auth "2.2.0"]
                  [buddy/buddy-hashers "1.4.0"]
                  [buddy/buddy-sign "3.1.0"]
+                 [camel-snake-kebab "0.4.0"]
                  [clj-time "0.15.2"]
                  [org.clojure/test.check "0.10.0" :scope "test"]]
   :min-lein-version "2.0.0"
diff --git a/src/datakam/domain.clj b/src/datakam/domain.clj
index 8f8eb00..6846fee 100644
--- a/src/datakam/domain.clj
+++ b/src/datakam/domain.clj
@@ -5,6 +5,7 @@
             [contractskam.specs.thing-spec :as tspk]
             [contractskam.specs.data-spec :as dspk]
             [contractskam.specs.document-spec :as docspk]
+            [contractskam.specs.media-spec :as mspk]
             [datakam.dal :as dal]
             [datakam.auth :as auth]))
 
@@ -18,6 +19,22 @@
         data (dal/query-data (select-keys thing [:ThingID]))]
     (docspk/thing-data-to-document thing data)))
 
+(defn get-media [mkey]
+  {:pre  [(okspk? ::mspk/media-key (mspk/media-keys-localize mkey))]
+   :post [(okspk? ::mspk/document (mspk/media-keys-localize %))]}
+  (let [thing (dal/get-thing {:Name (:ParentDocumentID mkey)
+                              :ThingID (:MediaID mkey)})
+        data (dal/query-data (select-keys thing [:ThingID]))]
+    (mspk/thing-data-to-media thing data)))
+
+(defn get-browse-media [mkey]
+  {:pre  [(okspk? ::mspk/media-key (mspk/media-keys-localize mkey))]
+   :post [(okspk? ::mspk/document (mspk/media-keys-localize %))]}
+  (let [thing (dal/get-thing {:Name (:Type mkey)
+                              :ThingID (:MediaID mkey)})
+        data (dal/query-data (select-keys thing [:ThingID]))]
+    (mspk/thing-data-to-media thing data)))
+
 ;; PUT (Private)
 
 (defn- put-document [doc]
@@ -28,6 +45,15 @@
     (dal/batch-write (hash-map :Things {:Puts [thing]}
                                :Data {:Puts data}))))
 
+(defn- put-media [media]
+  {:pre  [(okspk? ::mspk/media (mspk/media-keys-localize media))]
+   :post [(okspk? empty? %)]}
+  (let [thing (mspk/media-to-thing media)
+        association (mspk/media-to-association media)
+        data (mspk/media-to-data media)]
+    (dal/batch-write (hash-map :Things {:Puts [thing association]}
+                               :Data {:Puts data}))))
+
 ;; QUERY
 
 (defn query-document [m & options]
@@ -39,6 +65,15 @@
               (docspk/thing-data-to-document thing data))) things)
     ))
 
+(defn query-media [m & options]
+  {:pre  [(okspk? ::tspk/thing-like (tspk/thing-keys-localize m))]
+   :post [(okspk? ::mspk/many-media-type (map mspk/media-keys-localize %))]}
+  (let [things (apply dal/query-thing m options)]
+    (pmap (fn [thing]
+            (let [data (dal/query-data (select-keys thing [:ThingID]))]
+              (docspk/thing-data-to-document thing data))) things)
+    ))
+
 ;; DELETE (Private)
 
 (defn- delete-document [dockey]
@@ -48,7 +83,26 @@
                               :ThingID (:DocumentID dockey)})
         data (dal/query-data (select-keys thing [:ThingID]))]
     (dal/batch-write (hash-map :Things {:Deletes [thing]}
-                               :Data {:Deletes data}))))
+                               :Data {:Deletes data}))
+    ))
+
+(defn- delete-media [mkey]
+  {:pre  [(okspk? ::docspk/document-key (docspk/document-keys-localize mkey))]
+   :post [(okspk? empty? %)]}
+  (let [thing (dal/get-thing {:Name (:ParentDocumentID mkey)
+                              :ThingID (:MediaID mkey)})]
+    (dal/batch-write (hash-map :Things {:Deletes [thing]}))
+    ))
+
+(defn- delete-browse-media [mkey]
+  {:pre  [(okspk? ::docspk/document-key (docspk/document-keys-localize mkey))]
+   :post [(okspk? empty? %)]}
+  (let [thing (dal/get-thing {:Name (:Type mkey)
+                              :ThingID (:MediaID mkey)})
+        data (dal/query-data (select-keys thing [:ThingID]))]
+    (dal/batch-write (hash-map :Things {:Deletes [thing]}
+                               :Data {:Deletes data}))
+    ))
 
 ;;;; REQUIREs AUTH
 
@@ -59,6 +113,11 @@
     (put-document doc)
     {:token new-token}))
 
+(defn put-med [token med]
+  (let [new-token (auth/jwt-refresh token)]
+    (put-media med)
+    {:token new-token}))
+
 (defn put-profile [token profile]
   (let [new-token (auth/jwt-refresh token)]
     (dal/put-userprofile profile)
@@ -71,6 +130,10 @@
     (delete-document dockey)
     {:token new-token}))
 
+(defn delete-med [token mkey]
+  (let [new-token (auth/jwt-refresh token)]
+    (delete-media mkey)
+    {:token new-token}))
 
 
 (comment
diff --git a/src/datakam/specs/document_spec.cljc b/src/datakam/specs/document_spec.cljc
index 867449d..42fe839 100644
--- a/src/datakam/specs/document_spec.cljc
+++ b/src/datakam/specs/document_spec.cljc
@@ -6,6 +6,7 @@
             [contractskam.specs.common-spec :as cspk]
             [contractskam.specs.thing-spec :as tspk]
             [contractskam.specs.data-spec :as dspk]
+            [contractskam.specs.media-spec :as mspk]
             [com.rpl.specter :as S])
   (:import java.util.Base64))
 
@@ -24,6 +25,7 @@
 (s/def ::Title ::cspk/non-null-string-type)
 (s/def ::Identifier ::cspk/non-null-string-type)
 (s/def ::Body ::cspk/non-null-string-type)
+(s/def ::Media ::mspk/many-media-type)
 ;; (s/def ::Bag (s/map-of keyword? ::cspk/has-some-value-type))
 (s/def ::Extra (s/map-of keyword? ::cspk/has-some-value-type))
 (s/def ::Tags ::cspk/tags-type)
@@ -36,8 +38,8 @@
                                 ::Slug ::FiltreVisuel
                                 ::Langue ::Niveau
                                 ::Identifier ::Title ::Body]
-                          :opt [::Tags ::Version ::Score
-                                ::CreatedAt ::UpdatedAt]))
+                          :opt [::Media ::Tags ::Version
+                                ::Score ::CreatedAt ::UpdatedAt]))
 
 (s/def ::document-like (s/or
                     :k ::document-key
